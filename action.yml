name: 'Install Procursus'
description: 'Install the Procursus toolchain'
author: 'beerpsi'

inputs:
  packages:
    description: 'Space-delimited list of packages to install after bootstrapping'
    required: false
    default: null
  cache:
    description: 'Cache Procursus installation for faster bootstrapping next run'
    required: false
    default: true

runs:
  using: "composite"
  steps:
    - uses: actions/cache@v2
      id: procursus-cache
      if: inputs.cache == 'true'
      with:
        path: /usr/local/opt/__procursus_cache
        key: ${{ runner.os }}-${{ env.GITHUB_JOB }}-procursus
      
    - name: Setting up bootstrap
      if: inputs.cache != 'true' || steps.procursus-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        curl -L https://apt.procurs.us/bootstrap_darwin-amd64.tar.zst -o bootstrap.tar.zst
        zstd -d bootstrap.tar.zst
        sudo gtar -xpkf bootstrap.tar -C /
        
    - name: Restoring bootstrap from cache
      if: inputs.cache == 'true' && steps.procursus-cache.outputs.cache-hit == 'true'
      shell: bash
      run: |
        sudo mkdir -p /usr/local/opt/__procursus_cache/procursus/var/cache/apt/archives/partial \
          /usr/local/opt/__procursus_cache/procursus/var/lib/apt/lists/partial
        sudo rsync -aP /usr/local/opt/__procursus_cache/procursus /opt

    - name: Adding Procusus to PATH
      shell: bash
      run: |
        echo "/opt/procursus/bin:/opt/procursus/sbin:/opt/procursus/games" >> $GITHUB_PATH
        echo "CPATH='$CPATH:/opt/procursus/include'" >> $GITHUB_ENV
        echo "LIBRARY_PATH='$LIBRARY_PATH:/opt/procursus/lib'" >> $GITHUB_ENV

    - name: Create unprivileged user for apt method
      shell: bash
      run: |
        set -e
        getHiddenUserUid()
        {
            local __UIDS=$(dscl . -list /Users UniqueID | awk '{print $2}' | sort -ugr)
            local __NewUID
            for __NewUID in $__UIDS
            do
                if [[ $__NewUID -lt 499 ]] ; then
                    break;
                fi
            done
            echo $((__NewUID+1))
        }
        
        if ! id _apt &>/dev/null; then
            # add unprivileged user for the apt methods
            sudo dscl . -create /Users/_apt UserShell /usr/bin/false
            sudo dscl . -create /Users/_apt NSFHomeDirectory /var/empty
            sudo dscl . -create /Users/_apt PrimaryGroupID -1
            sudo dscl . -create /Users/_apt UniqueID $(getHiddenUserUid)
            sudo dscl . -create /Users/_apt RealName "APT Sandbox User"
        fi  
        
    - name: Updating bootstrap
      shell: bash
      run: |
        sudo apt-get -y update
        sudo apt-get -y dist-upgrade || :
    
    - name: Caching bootstrap
      if: inputs.cache == 'true'
      shell: bash
      run: |
        sudo mkdir -p /usr/local/opt/__procursus_cache
        sudo rsync -aP /opt/procursus /usr/local/opt/__procursus_cache
        sudo rm -rf /usr/local/opt/__procursus_cache/procursus/var/cache/apt/archives/partial \
          /usr/local/opt/__procursus_cache/procursus/var/lib/apt/lists/partial \
          /usr/local/opt/__procursus_cache/procursus/Library/dpkg/triggers/Lock

    - name: Install packages
      shell: bash
      if: inputs.packages
      run: |
        sudo apt-get install -y ${{ inputs.packages }}
        

branding:
  icon: download-cloud
  color: purple
